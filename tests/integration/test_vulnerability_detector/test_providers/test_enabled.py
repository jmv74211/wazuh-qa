'''
copyright: Copyright (C) 2015-2021, Wazuh Inc.

           Created by Wazuh, Inc. <info@wazuh.com>.

           This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

type: integration

brief: Wazuh is able to detect vulnerabilities in the applications installed in agents using the Vulnerability Detector
       module. This software audit is performed through the integration of vulnerability feeds indexed by Redhat,
       Canonical, Debian, Amazon Linux and NVD Database.

tier: 0

modules:
    - vulnerability_detector

components:
    - manager

daemons:
    - wazuh-modulesd
    - wazuh-db

os_platform:
    - linux

os_version:
    - Arch Linux
    - Amazon Linux 2
    - Amazon Linux 1
    - CentOS 8
    - CentOS 7
    - CentOS 6
    - Ubuntu Focal
    - Ubuntu Bionic
    - Ubuntu Xenial
    - Ubuntu Trusty
    - Debian Buster
    - Debian Stretch
    - Debian Jessie
    - Debian Wheezy
    - Red Hat 8
    - Red Hat 7
    - Red Hat 6

references:
    - https://documentation.wazuh.com/current/user-manual/capabilities/vulnerability-detection/index.html
    - https://documentation.wazuh.com/current/user-manual/reference/ossec-conf/vuln-detector.html#provider

tags:
    - settings
    - vulnerability
    - vulnerability_detector
    - providers
'''
import os
import pytest
from datetime import date

from wazuh_testing.tools.configuration import load_configuration_template, get_test_cases_data
from wazuh_testing.db_interface import cve_db
from wazuh_testing.modules import vulnerability_detector as vd
from wazuh_testing.modules.vulnerability_detector import event_monitor as evm


# Reference paths
TEST_DATA_PATH = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'data')
CONFIGURATIONS_PATH = os.path.join(TEST_DATA_PATH, 'configuration_template')
TEST_CASES_PATH = os.path.join(TEST_DATA_PATH, 'test_cases')

# Configuration and cases data
configurations_path = os.path.join(CONFIGURATIONS_PATH, 'configuration_enabled.yaml')
test_enabled_cases_path = os.path.join(TEST_CASES_PATH, 'cases_enabled.yaml')
test_disabled_cases_path = os.path.join(TEST_CASES_PATH, 'cases_disabled.yaml')

# Enabled test configurations
enabled_configuration_parameters, enabled_configuration_metadata, enabled_test_case_ids = \
    get_test_cases_data(test_enabled_cases_path)
enabled_configurations = load_configuration_template(configurations_path, enabled_configuration_parameters,
                                                     enabled_configuration_metadata)

# Disabled test configurations
disabled_configuration_parameters, disabled_configuration_metadata, disabled_test_case_ids = \
    get_test_cases_data(test_disabled_cases_path)
disabled_configurations = load_configuration_template(configurations_path, disabled_configuration_parameters,
                                                      disabled_configuration_metadata)

# Add <update_from_year> tag for NVD to download only the last year feed and speed up the testing process
# Set it for enabled configurations
for index, configuration in enumerate(enabled_configurations):
    if configuration['sections'][0]['elements'][1]['provider']['attributes'][0]['name'] == 'nvd':
        configuration['sections'][0]['elements'][1]['provider']['elements'].append(
            {'update_from_year': {'value': date.today().year}})

# Set it for disabled configurations
for index, configuration in enumerate(disabled_configurations):
    if configuration['sections'][0]['elements'][1]['provider']['attributes'][0]['name'] == 'nvd':
        configuration['sections'][0]['elements'][1]['provider']['elements'].append(
            {'update_from_year': {'value': date.today().year}})


@pytest.mark.tier(level=0)
@pytest.mark.parametrize('configuration, metadata', zip(enabled_configurations, enabled_configuration_metadata),
                         ids=enabled_test_case_ids)
def test_enabled(configuration, metadata, set_wazuh_configuration, truncate_monitored_files, restart_modulesd_function):
    '''
    description: Check if modulesd downloads the feeds from different providers when enabled is set to yes. To do this,
                 it identifies the log which, if activated, indicates the update of the feeds.

    wazuh_min_version: 4.2.0

    parameters:
        - configuration:
            type: dict
            brief: Wazuh configuration data. Needed for set_wazuh_configuration fixture.
        - metadata:
            type: dict
            brief: Wazuh configuration metadata
        - set_wazuh_configuration:
            type: fixture
            brief: Set the wazuh configuration according to the configuration data.
        - truncate_monitored_files:
            type: fixture
            brief: Truncate all the log files and json alerts files before and after the test execution.
        - restart_modulesd_function:
            type: fixture
            brief: Restart the wazuh-modulesd daemon.

    assertions:
        - If the provider tag is enabled, then the provider feed download starts.

    input_description:
        - The `test_enabled.yaml` file provides the module configuration for this test.

    expected_output:
        - 'Starting <provider_name> database update'
    '''
    evm.check_provider_database_update_start_log(metadata['provider_name'])


@pytest.mark.tier(level=0)
@pytest.mark.parametrize('configuration, metadata', zip(disabled_configurations, disabled_configuration_metadata),
                         ids=disabled_test_case_ids)
def test_disabled(configuration, metadata, set_wazuh_configuration, truncate_monitored_files,
                  restart_modulesd_function):
    '''
    description: Check if modulesd downloads the feeds from different providers when enabled is set to yes. To do this,
                 it identifies the log which, if activated, indicates the update of the feeds.

    wazuh_min_version: 4.2.0

    parameters:
        - configuration:
            type: dict
            brief: Wazuh configuration data. Needed for set_wazuh_configuration fixture.
        - metadata:
            type: dict
            brief: Wazuh configuration metadata
        - set_wazuh_configuration:
            type: fixture
            brief: Set the wazuh configuration according to the configuration data.
        - restart_modulesd_function:
            type: fixture
            brief: Restart the wazuh-modulesd daemon.
        - truncate_monitored_files:
            type: fixture
            brief: Truncate all the log files and json alerts files before and after the test execution.

    assertions:
        - If the provider tag is disabled, then the provider feed download must not start.

    input_description:
        - The `test_disabled.yaml` file provides the module configuration for this test.

    expected_output:
        - 'Starting <provider_name> database update'
    '''
    # Check that the update event does not occur
    with pytest.raises(TimeoutError):
        evm.check_provider_database_update_start_log(metadata['provider_name'])
        raise AttributeError(f"Unexpected event {metadata['provider_name']} database updating")


@pytest.mark.tier(level=5)
@pytest.mark.parametrize('configuration, metadata', zip(enabled_configurations, enabled_configuration_metadata),
                         ids=enabled_test_case_ids)
def test_enabled_extended(configuration, metadata, set_wazuh_configuration, truncate_monitored_files,
                          clean_cve_tables_func, restart_modulesd_function):
    '''
    description: Check if modulesd downloads the feeds from different providers when enabled is set to yes. To do this,
                 it identifies the log which, if activated, indicates the update of the feeds. In addition, it checks
                 that the feed has been downloaded successfully and the feeds has been imported successfully.

    wazuh_min_version: 4.2.0

    parameters:
        - configuration:
            type: dict
            brief: Wazuh configuration data. Needed for set_wazuh_configuration fixture.
        - metadata:
            type: dict
            brief: Wazuh configuration metadata
        - set_wazuh_configuration:
            type: fixture
            brief: Set the wazuh configuration according to the configuration data.
        - truncate_monitored_files:
            type: fixture
            brief: Truncate all the log files and json alerts files before and after the test execution.
        - clean_cve_tables_func:
            type: fixture
            brief: Clean all the CVE tables before and after running the test.
        - restart_modulesd_function:
            type: fixture
            brief: Restart the wazuh-modulesd daemon.

    assertions:
        - If the provider tag is enabled, then the provider feed download starts.
        - The feed has been downloaded successfully.
        - The feed data has been imported in the CVE database tables successfully.

    input_description:
        - The `test_enabled.yaml` file provides the module configuration for this test.

    expected_output:
        - 'Starting <provider_name> database update'
        - 'The update of the <provider_name> feed finished'
    '''
    evm.check_provider_database_update_start_log(metadata['provider_name'])

    evm.check_provider_database_update_finish_log(metadata['provider_name'], timeout=vd.T_180)

    # Vulnerabilities feed must be inserted in the DB
    if metadata['provider_name'] == 'National Vulnerability Database':
        assert cve_db.get_NVD_feeds_number() > 0
    elif metadata['provider_name'] == 'Microsoft Security Update':
        assert cve_db.get_MSU_feeds_number() > 0
    else:
        assert cve_db.get_provider_feeds_number() > 0


@pytest.mark.tier(level=5)
@pytest.mark.parametrize('configuration, metadata', zip(disabled_configurations, disabled_configuration_metadata),
                         ids=disabled_test_case_ids)
def test_disabled_extended(configuration, metadata, set_wazuh_configuration, truncate_monitored_files,
                           clean_cve_tables_func, restart_modulesd_function):
    '''
    description: Check if modulesd downloads the feeds from different providers when enabled is set to yes. To do this,
                 it identifies the log which, if activated, indicates the update of the feeds.

    wazuh_min_version: 4.2.0

    parameters:
        - configuration:
            type: dict
            brief: Wazuh configuration data. Needed for set_wazuh_configuration fixture.
        - metadata:
            type: dict
            brief: Wazuh configuration metadata
        - set_wazuh_configuration:
            type: fixture
            brief: Set the wazuh configuration according to the configuration data.
        - truncate_monitored_files:
            type: fixture
            brief: Truncate all the log files and json alerts files before and after the test execution.
        - clean_cve_tables_func:
            type: fixture
            brief: Clean all the CVE tables before and after running the test.
        - restart_modulesd_function:
            type: fixture
            brief: Restart the wazuh-modulesd daemon.

    assertions:
        - If the provider tag is disabled, then the provider feed download must not start.
        - There is no feed entries in the CVE database.

    input_description:
        - The `test_disabled.yaml` file provides the module configuration for this test.

    expected_output:
        - 'Starting <provider_name> database update'
    '''
    # Check that the update event does not occur
    with pytest.raises(TimeoutError):
        evm.check_provider_database_update_start_log(metadata['provider_name'])
        raise AttributeError(f"Unexpected event {metadata['provider_name']} database updating")

    # Vulnerabilities feed must not be inserted in the DB
    if metadata['provider_name'] == 'National Vulnerability Database':
        assert cve_db.get_NVD_feeds_number() == 0
    elif metadata['provider_name'] == 'Microsoft Security Update':
        assert cve_db.get_MSU_feeds_number() == 0
    else:
        assert cve_db.get_provider_feeds_number() == 0
