'''
copyright: Copyright (C) 2015-2021, Wazuh Inc.

           Created by Wazuh, Inc. <info@wazuh.com>.

           This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

type: integration

brief: Wazuh is able to detect vulnerabilities in the applications installed in agents using the Vulnerability Detector
       module. This software audit is performed through the integration of vulnerability feeds indexed by Redhat,
       Canonical, Debian, Amazon Linux and NVD Database.

tier: 1

modules:
    - vulnerability_detector

components:
    - manager

daemons:
    - wazuh-modulesd
    - wazuh-db
    - wazuh-analysisd

os_platform:
    - linux

os_version:
    - Arch Linux
    - Amazon Linux 2
    - Amazon Linux 1
    - CentOS 8
    - CentOS 7
    - CentOS 6
    - Ubuntu Focal
    - Ubuntu Bionic
    - Ubuntu Xenial
    - Ubuntu Trusty
    - Debian Buster
    - Debian Stretch
    - Debian Jessie
    - Debian Wheezy
    - Red Hat 8
    - Red Hat 7
    - Red Hat 6

references:
    - https://documentation.wazuh.com/current/user-manual/capabilities/vulnerability-detection/index.html
    - https://documentation.wazuh.com/current/user-manual/reference/ossec-conf/vuln-detector.html#provider

tags:
    - settings
    - vulnerability
    - vulnerability_detector
    - providers
'''
import os
import pytest
from datetime import date

from wazuh_testing.db_interface import cve_db
from wazuh_testing.tools.services import control_service
from wazuh_testing.tools import configuration
from wazuh_testing.modules import vulnerability_detector as vd
from wazuh_testing.modules.vulnerability_detector import event_monitor as evm


pytestmark = [pytest.mark.server]

# Reference paths
TEST_DATA_PATH = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'data')
CONFIGURATIONS_PATH = os.path.join(TEST_DATA_PATH, 'configuration_template')
TEST_CASES_PATH = os.path.join(TEST_DATA_PATH, 'test_cases')

# Configuration and cases data
configurations_path = os.path.join(CONFIGURATIONS_PATH, 'configuration_missing_os.yaml')
test_enabled_cases_path = os.path.join(TEST_CASES_PATH, 'cases_missing_os.yaml')

# Test configurations
configuration_parameters, configuration_metadata, test_case_ids = configuration.get_test_cases_data(
    test_enabled_cases_path)
configurations = configuration.load_configuration_template(configurations_path, configuration_parameters,
                                                           configuration_metadata)

# Add <update_from_year> tag for NVD to download only the last year feed and speed up the testing process
for index in range(len(configurations)):
    if configurations[index]['sections'][0]['elements'][1]['provider']['attributes'][0]['name'] == 'nvd':
        configurations[index]['sections'][0]['elements'][1]['provider']['elements'].append(
            {'update_from_year': {'value': date.today().year}})


@pytest.mark.tier(level=0)
@pytest.mark.parametrize('configuration, metadata', zip(configurations, configuration_metadata), ids=test_case_ids)
def test_providers_missing_os(configuration, metadata, set_wazuh_configuration, truncate_monitored_files,
                              clean_cve_tables_func):
    '''
    description: Check if modulesd starts downloading the feeds without specifying the os version. To do this, it checks
                 if errors occur when the <os> tag is omitted in the configuration in providers that should have it and,
                 on the other hand, if the update of the feeds starts normally in providers that do not require this
                 tag.

    wazuh_min_version: 4.2.0

    parameters:
        - configuration:
            type: dict
            brief: Wazuh configuration data. Needed for set_wazuh_configuration fixture.
        - metadata:
            type: dict
            brief: Wazuh configuration metadata
        - set_wazuh_configuration:
            type: fixture
            brief: Set the wazuh configuration according to the configuration data.
        - truncate_monitored_files:
            type: fixture
            brief: Truncate all the log files and json alerts files before and after the test execution.
        - clean_cve_tables_func:
            type: fixture
            brief: Clean all the CVE tables before and after running the test.
        - stop_modules_function_after_execution:
            type: fixture
            brief: Stop the wazuh modules daemon.

    assertions:
        - The provider os data update starts when `os` has not a determined value.
        - The error message appears when `os` tag is not present in Amazon Linux, Canonical and Debian providers.

    input_description:
        - The `test_no_os.yaml` file provides the module configuration for this test.

    expected_output:
        - r'.*: Configuration error at.*'
        - 'Starting <provider_name>  database update'
    '''
    provider_name = metadata['provider_name']

    # Those providers that aren't expected to work without the <os> tag.
    try:
        control_service('restart')
    except ValueError:
        evm.check_configuration_error()
    else:
        operating_system = metadata['os'][0]
        if operating_system != '':
            os_name = f"{provider_name} {operating_system}"
        else:
            os_name = f"JSON {provider_name}" if 'Red Hat' in provider_name else f"{provider_name}"

        evm.check_provider_database_update_start_log(os_name, vd.T_180)


@pytest.mark.tier(level=5)
@pytest.mark.parametrize('configuration, metadata', zip(configurations, configuration_metadata), ids=test_case_ids)
def test_providers_missing_os_extended(configuration, metadata, set_wazuh_configuration, truncate_monitored_files,
                                       clean_cve_tables_func):
    '''
    description: Check if modulesd downloads the feeds without specifying the os version. To do this, it checks if
                 errors occur when the <os> tag is omitted in the configuration in providers that should have it and,
                 on the other hand, if the feeds are indexed in the database in providers that do not require this tag.

    wazuh_min_version: 4.2.0

    parameters:
        - configuration:
            type: dict
            brief: Wazuh configuration data. Needed for set_wazuh_configuration fixture.
        - metadata:
            type: dict
            brief: Wazuh configuration metadata
        - set_wazuh_configuration:
            type: fixture
            brief: Set the wazuh configuration according to the configuration data.
        - truncate_monitored_files:
            type: fixture
            brief: Truncate all the log files and json alerts files before and after the test execution.
        - clean_cve_tables_func:
            type: fixture
            brief: Clean all the CVE tables before and after running the test.
        - stop_modules_function_after_execution:
            type: fixture
            brief: Stop the wazuh modules daemon.

    assertions:
        - The provider os data update starts when `os` has not a determined value.
        - The error message appears when `os` tag is not present in Amazon Linux, Canonical and Debian providers.
        - The feeds are indexed in the database.

    input_description:
        - The `test_no_os.yaml` file provides the module configuration for this test.

    expected_output:
        - r'.*: Configuration error at.*'
        - 'Starting <provider_name>  database update'
        - 'The update of the <provider_name> feed finished'
    '''
    provider_name = metadata['provider_name']

    # Those providers that aren't expected to work without the <os> tag.
    try:
        control_service('restart')
    except ValueError:
        evm.check_configuration_error()
    else:
        for operating_system in metadata['os']:
            if operating_system != '':
                os_name = f"{provider_name} {operating_system}"
            else:
                os_name = f"JSON {provider_name}" if 'Red Hat' in provider_name else f"{provider_name}"

            evm.check_provider_database_update_start_log(os_name, vd.T_180)
            evm.check_provider_database_update_finish_log(os_name, vd.T_800)

            # Vulnerabilities feed must be inserted in the DB
            if metadata['provider_name'] == 'National Vulnerability Database':
                assert cve_db.get_NVD_feeds_number() > 0
            elif metadata['provider_name'] == 'Microsoft Security Update':
                assert cve_db.get_MSU_feeds_number() > 0
            else:
                assert cve_db.get_provider_feeds_number() > 0
