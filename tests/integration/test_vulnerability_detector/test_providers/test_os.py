'''
copyright: Copyright (C) 2015-2021, Wazuh Inc.

           Created by Wazuh, Inc. <info@wazuh.com>.

           This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

type: integration

brief: Wazuh is able to detect vulnerabilities in the applications installed in agents using the Vulnerability Detector
       module. This software audit is performed through the integration of vulnerability feeds indexed by Redhat,
       Canonical, Debian, Amazon Linux and NVD Database.

tier: 1

modules:
    - vulnerability_detector

components:
    - manager

daemons:
    - wazuh-modulesd
    - wazuh-db
    - wazuh-analysisd

os_platform:
    - linux

os_version:
    - Arch Linux
    - Amazon Linux 2
    - Amazon Linux 1
    - CentOS 8
    - CentOS 7
    - CentOS 6
    - Ubuntu Focal
    - Ubuntu Bionic
    - Ubuntu Xenial
    - Ubuntu Trusty
    - Debian Buster
    - Debian Stretch
    - Debian Jessie
    - Debian Wheezy
    - Red Hat 8
    - Red Hat 7
    - Red Hat 6

references:
    - https://documentation.wazuh.com/current/user-manual/capabilities/vulnerability-detection/index.html
    - https://documentation.wazuh.com/current/user-manual/reference/ossec-conf/vuln-detector.html#provider

tags:
    - settings
    - vulnerability
    - vulnerability_detector
    - providers
'''
import os
import pytest
from datetime import date

from wazuh_testing.db_interface import cve_db
from wazuh_testing.tools import configuration
from wazuh_testing.modules import vulnerability_detector as vd
from wazuh_testing.modules.vulnerability_detector import event_monitor as evm


pytestmark = [pytest.mark.server]

# Reference paths
TEST_DATA_PATH = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'data')
CONFIGURATIONS_PATH = os.path.join(TEST_DATA_PATH, 'configuration_template')
TEST_CASES_PATH = os.path.join(TEST_DATA_PATH, 'test_cases')

# Configuration and cases data
configurations_path = os.path.join(CONFIGURATIONS_PATH, 'configuration_os.yaml')
test_enabled_cases_path = os.path.join(TEST_CASES_PATH, 'cases_os.yaml')

# Test configurations
configuration_parameters, configuration_metadata, test_case_ids = configuration.get_test_cases_data(
    test_enabled_cases_path)
configurations = configuration.load_configuration_template(configurations_path, configuration_parameters,
                                                           configuration_metadata)

# Add <update_from_year> tag for NVD to download only the last year feed and speed up the testing process
for index in range(len(configurations)):
    if configurations[index]['sections'][0]['elements'][1]['provider']['attributes'][0]['name'] == 'nvd':
        configurations[index]['sections'][0]['elements'][1]['provider']['elements'].append(
            {'update_from_year': {'value': date.today().year}})


@pytest.mark.tier(level=0)
@pytest.mark.parametrize('configuration, metadata', zip(configurations, configuration_metadata), ids=test_case_ids)
def test_providers_os(configuration, metadata, set_wazuh_configuration, truncate_monitored_files,
                      clean_cve_tables_func, restart_modulesd_function):
    '''
    description: Check if modulesd downloads the feeds for each os. To do this, it verifies that the update of the feeds
                 is started by checking the log file. Additionally, it verifies that a warning message is generated
                 regarding the improper use of the <os> tag in providers that do not use it.

    wazuh_min_version: 4.2.0

    parameters:
        - configuration:
            type: dict
            brief: Wazuh configuration data. Needed for set_wazuh_configuration fixture.
        - metadata:
            type: dict
            brief: Wazuh configuration metadata
        - set_wazuh_configuration:
            type: fixture
            brief: Set the wazuh configuration according to the configuration data.
        - truncate_monitored_files:
            type: fixture
            brief: Truncate all the log files and json alerts files before and after the test execution.
        - clean_cve_tables_func:
            type: fixture
            brief: Clean all the CVE tables before and after running the test.
        - restart_modulesd_function:
            type: fixture
            brief: Restart the wazuh-modulesd daemon.

    assertions:
        - The provider os data update starts.
        - The warning message appears when `os` tag is empty in NVD and MSU providers.

    input_description:
        - The `test_os.yaml` file provides the module configuration for this test.

    expected_output:
        - r'Invalid option 'os' for '{provider_name}' provider.*'
        - 'Starting '{provider_name}' database update'
    '''
    provider_name = metadata['provider_name']
    operating_system = metadata['os']

    if operating_system == '':
        if 'National Vulnerability Database' in provider_name:
            provider_short_name = 'nvd'
        elif 'Microsoft Security Update' in provider_name:
            provider_short_name = 'msu'
        else:
            raise ValueError(f"Unexpected {provider_name} provider in the test case metadata list")
        evm.check_invalid_option_log(provider_short_name)

    evm.check_provider_database_update_start_log(provider_name)


@pytest.mark.tier(level=5)
@pytest.mark.parametrize('configuration, metadata', zip(configurations, configuration_metadata), ids=test_case_ids)
def test_providers_os_extended(configuration, metadata, set_wazuh_configuration, truncate_monitored_files,
                               clean_cve_tables_func, restart_modulesd_function):
    '''
    description: Check if modulesd downloads the feeds for each os. To do this, it verifies that the update of the feeds
                 is started by checking the log file. Additionally, it verifies that a warning message is generated
                 regarding the improper use of the <os> tag in providers that do not use it. On the other hand, it
                 checks if the feeds are indexed in the database.

    wazuh_min_version: 4.2.0

    parameters:
        - configuration:
            type: dict
            brief: Wazuh configuration data. Needed for set_wazuh_configuration fixture.
        - metadata:
            type: dict
            brief: Wazuh configuration metadata
        - set_wazuh_configuration:
            type: fixture
            brief: Set the wazuh configuration according to the configuration data.
        - truncate_monitored_files:
            type: fixture
            brief: Truncate all the log files and json alerts files before and after the test execution.
        - clean_cve_tables_func:
            type: fixture
            brief: Clean all the CVE tables before and after running the test.
        - restart_modulesd_function:
            type: fixture
            brief: Restart the wazuh-modulesd daemon.

    assertions:
        - The provider os data update starts.
        - The warning message appears when `os` tag is empty in NVD and MSU providers.
        - The feeds are indexed in the database.

    input_description:
        - The `test_os.yaml` file provides the module configuration for this test.

    expected_output:
        - r'Invalid option 'os' for '{provider_name}' provider.*'
        - 'Starting '{provider_name}' database update'
        - 'The update of the <provider_name> feed finished'
    '''
    provider_name = metadata['provider_name']
    operating_system = metadata['os']

    if operating_system == '':
        if 'National Vulnerability Database' in provider_name:
            provider_short_name = 'nvd'
        elif 'Microsoft Security Update' in provider_name:
            provider_short_name = 'msu'
        else:
            raise ValueError(f"Unexpected {provider_name} provider in the test case metadata list")
        evm.check_invalid_option_log(provider_short_name)

    evm.check_provider_database_update_start_log(provider_name)
    evm.check_provider_database_update_finish_log(provider_name, vd.T_800)

    # Vulnerabilities feed must be inserted in the DB
    if metadata['provider_name'] == 'National Vulnerability Database':
        assert cve_db.get_NVD_feeds_number() > 0
    elif metadata['provider_name'] == 'Microsoft Security Update':
        assert cve_db.get_MSU_feeds_number() > 0
    else:
        assert cve_db.get_provider_feeds_number() > 0
