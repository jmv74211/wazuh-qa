'''
copyright: Copyright (C) 2015-2021, Wazuh Inc.

           Created by Wazuh, Inc. <info@wazuh.com>.

           This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

type: integration

brief: Wazuh is able to detect vulnerabilities in the applications installed in agents using the Vulnerability Detector
       module. This software audit is performed through the integration of vulnerability feeds indexed by Redhat,
       Canonical, Debian, Amazon Linux and NVD Database.

tier: 0

modules:
    - vulnerability_detector

components:
    - manager

daemons:
    - wazuh-modulesd
    - wazuh-db
    - wazuh-analysisd

os_platform:
    - linux

os_version:
    - Arch Linux
    - Amazon Linux 2
    - Amazon Linux 1
    - CentOS 8
    - CentOS 7
    - CentOS 6
    - Ubuntu Focal
    - Ubuntu Bionic
    - Ubuntu Xenial
    - Ubuntu Trusty
    - Debian Buster
    - Debian Stretch
    - Debian Jessie
    - Debian Wheezy
    - Red Hat 8
    - Red Hat 7
    - Red Hat 6

references:
    - https://documentation.wazuh.com/current/user-manual/capabilities/vulnerability-detection/index.html

tags:
    - vulnerability
    - vulnerability_detector
    - scan_results
'''
import os
import pytest

from wazuh_testing.tools.configuration import load_configuration_template, get_test_cases_data
from wazuh_testing.tools.configuration import update_configuration_template
from wazuh_testing.tools.file import read_json_file, copy, remove_file, write_json_file
from wazuh_testing import CPE_HELPER_PATH
from wazuh_testing.mocking import SYSTEM_DATA
from wazuh_testing.db_interface import agent_db
from wazuh_testing.modules.vulnerability_detector import event_monitor as evm
from wazuh_testing.modules import vulnerability_detector as vd


pytestmark = [pytest.mark.server]

# Reference paths
TEST_DATA_PATH = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'data')
CONFIGURATIONS_PATH = os.path.join(TEST_DATA_PATH, 'configuration_template')
TEST_CASES_PATH = os.path.join(TEST_DATA_PATH, 'test_cases')
TEST_FEEDS_PATH = os.path.join(os.path.dirname(os.path.realpath(__file__)), '..', 'data', 'feeds')
TEST_PACKAGES_PATH = os.path.join(os.path.dirname(os.path.realpath(__file__)), '..', 'data', 'vulnerable_packages')

# Configuration and cases data
configurations_path = os.path.join(CONFIGURATIONS_PATH, 'scan_nvd_vulnerabilities.yaml')
scan_nvd_cases_path = os.path.join(TEST_CASES_PATH, 'cases_scan_nvd_vulnerabilities.yaml')
no_agent_data_cases_path = os.path.join(TEST_CASES_PATH, 'cases_no_agent_data.yaml')

# Custom paths
custom_nvd_json_feed_path = os.path.join(TEST_FEEDS_PATH, 'nvd', vd.CUSTOM_NVD_FEED)
custom_vulnerable_packages_path = os.path.join(TEST_PACKAGES_PATH, vd.CUSTOM_VULNERABLE_PACKAGES)
custom_cpe_helper_path = os.path.join(TEST_FEEDS_PATH, 'cpe_helper', vd.CUSTOM_CPE_HELPER)

# Scan NVD test configurations
scan_nvd_configuration_parameters, scan_nvd_configuration_metadata, scan_nvd_test_case_ids = \
    get_test_cases_data(scan_nvd_cases_path)
scan_nvd_configurations = load_configuration_template(configurations_path, scan_nvd_configuration_parameters,
                                                      scan_nvd_configuration_metadata)
scan_nvd_systems = [metadata['system'] for metadata in scan_nvd_configuration_metadata]

# No agent data test configurations
no_agent_data_configuration_parameters, no_agent_data_configuration_metadata, no_agent_data_test_case_ids = \
    get_test_cases_data(no_agent_data_cases_path)
no_agent_data_configurations = load_configuration_template(configurations_path, no_agent_data_configuration_parameters,
                                                           no_agent_data_configuration_metadata)
no_agent_data_systems = [metadata['system'] for metadata in no_agent_data_configuration_metadata]

# Set offline custom feeds configuration
scan_nvd_configurations = update_configuration_template(scan_nvd_configurations, ['CUSTOM_NVD_JSON_PATH'],
                                                        [custom_nvd_json_feed_path])
no_agent_data_configurations = update_configuration_template(no_agent_data_configurations, ['CUSTOM_NVD_JSON_PATH'],
                                                             [custom_nvd_json_feed_path])
# Global vars
vulnerable_packages = read_json_file(custom_vulnerable_packages_path)


@pytest.fixture(scope='function')
def prepare_scan(metadata, agent_system, mock_agent_with_custom_system):
    """Prepare the environment to launch the vulnerability scan.

    - Mock an agent with a specified system.
    - Insert mocked vulnerables packages.
    - Update packages sync status.
    - If Windows, then copy the custom CPE helper to the dictionaries folder.
    - Force full scan.

    Args:
        metadata (dict): Test case metadata.
        agent_system (str): System to set to the mocked agent.
        mock_agent_with_custom_system (fixture): Mock an agent with a custom system.
    """
    # Insert vulnerable packages
    for package in vulnerable_packages:
        agent_db.insert_package(name=package['name'], version=package['version'], source=package['name'],
                                agent_id=mock_agent_with_custom_system)

    agent_db.update_sync_info(agent_id=mock_agent_with_custom_system, component="syscollector-packages")

    if 'WINDOWS' in agent_system:
        agent_db.update_sync_info(agent_id=mock_agent_with_custom_system, component="syscollector-hotfixes")
        # Make a backup data from inital CPE helper
        cpe_helper_backup_data = read_json_file(CPE_HELPER_PATH)
        # Set the custom CPE helper
        copy(custom_cpe_helper_path, CPE_HELPER_PATH)

    # Forcing a full-scan
    agent_db.update_last_full_scan(1, agent_id=mock_agent_with_custom_system)

    yield mock_agent_with_custom_system

    if 'WINDOWS' in agent_system:
        # Restore the CPE helper backup data
        write_json_file(CPE_HELPER_PATH, cpe_helper_backup_data)


@pytest.mark.parametrize('configuration, metadata, agent_system',
                         zip(scan_nvd_configurations, scan_nvd_configuration_metadata, scan_nvd_systems),
                         ids=scan_nvd_test_case_ids)
def test_scan_nvd_vulnerabilities(configuration, metadata, agent_system, set_wazuh_configuration,
                                  truncate_monitored_files, clean_cve_tables_func, prepare_scan,
                                  restart_modulesd_function):
    '''
    description: Check if the corresponding vulnerability alerts and logs are generated after scanning with an NVD feed
                 and custom vulnerable packages, using only the NVD feed.This is tested for macOS and Windows system.

    wazuh_min_version: 4.3.0

    parameters:
        - configuration:
            type: dict
            brief: Configuration loaded from `configuration_template`.
        - metadata:
            type: dict
            brief: Test case metadata.
        - agent_system:
            type: str
            brief: System to set to the mocked agent.
        - set_wazuh_configuration:
            type: fixture
            brief: Set wazuh configuration.
        - truncate_monitored_files:
            type: fixture
            brief: Truncate all the log files and json alerts files before and after the test execution.
        - clean_cve_tables_func
            type: fixture
            brief: Clean all CVE tables.
        - prepare_scan
            type: fixture
            brief: Setup the initial test state.
        - restart_modulesd_function:
            type: fixture
            brief: Restart wazuh-modulesd daemon before starting a test, and stop it after finishing.

    assertions:
        - Verify that the log vulnerability report appears in ossec.log for each vulnerable package.
        - Verify that the alert vulnerability report appears in alerts.json for each vulnerable package.

    input_description:
        - The `scan_nvd_vulnerabilities.yaml` file provides the module configuration for this test.
        - The `cases_scan_nvd_vulnerabilities.yaml` file provides the test cases.

    expected_output:
        - f"The '{package}' package .* from agent '{agent_id}' is vulnerable to '{cve}'"
        - f".*"agent":."id":"{agent_id}".*{cve} affects {package}"
    '''
    for package in vulnerable_packages:
        evm.check_vulnerability_affects_log(agent_id=prepare_scan, package=package['name'],
                                            cve=package['cveid'])

        evm.check_vulnerability_affects_alert(agent_id=prepare_scan, package=package['name'],
                                              cve=package['cveid'])


@pytest.mark.parametrize('configuration, metadata, agent_system',
                         zip(no_agent_data_configurations, no_agent_data_configuration_metadata, no_agent_data_systems),
                         ids=no_agent_data_test_case_ids)
def test_no_agent_data(configuration, metadata, agent_system, set_wazuh_configuration, truncate_monitored_files,
                       clean_cve_tables_func, prepare_scan, restart_modulesd_function):
    '''
    description: Check that a Warning message is displayed when attempting to perform a vulnerability scan using only
                 the NVD feed for Linux systems.

    wazuh_min_version: 4.3.0

    parameters:
        - configuration:
            type: dict
            brief: Configuration loaded from `configuration_template`.
        - metadata:
            type: dict
            brief: Test case metadata.
        - agent_system:
            type: str
            brief: System to set to the mocked agent.
        - set_wazuh_configuration:
            type: fixture
            brief: Set wazuh configuration.
        - truncate_monitored_files:
            type: fixture
            brief: Truncate all the log files and json alerts files before and after the test execution.
        - clean_cve_tables_func
            type: fixture
            brief: Clean all CVE tables.
        - prepare_scan
            type: fixture
            brief: Setup the initial test state.
        - restart_modulesd_function:
            type: fixture
            brief: Restart wazuh-modulesd daemon before starting a test, and stop it after finishing.

    assertions:
        - Verify that the warning message is displayed when using only the NVD feed in Linux systen scans.

    input_description:
        - The `scan_nvd_vulnerabilities.yaml` file provides the module configuration for this test.
        - The `cases_no_agent_data.yaml` file provides the test cases.

    expected_output:
        - f"Unavailable vulnerability data for the agent '{agent_id}' OS. Skipping it"
    '''
    evm.check_unavailable_vulnerability_agent_data(agent_id=prepare_scan)
