'''
copyright: Copyright (C) 2015-2021, Wazuh Inc.

           Created by Wazuh, Inc. <info@wazuh.com>.

           This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

type: integration

brief: Wazuh is able to detect vulnerabilities in the applications installed in agents using the Vulnerability Detector
       module. This software audit is performed through the integration of vulnerability feeds indexed by Redhat,
       Canonical, Debian, Amazon Linux and NVD Database.

tier: 1

modules:
    - vulnerability_detector

components:
    - manager

daemons:
    - wazuh-modulesd
    - wazuh-db
    - wazuh-analysisd

os_platform:
    - linux

os_version:
    - Arch Linux
    - Amazon Linux 2
    - Amazon Linux 1
    - CentOS 8
    - CentOS 7
    - CentOS 6
    - Ubuntu Focal
    - Ubuntu Bionic
    - Ubuntu Xenial
    - Ubuntu Trusty
    - Debian Buster
    - Debian Stretch
    - Debian Jessie
    - Debian Wheezy
    - Red Hat 8
    - Red Hat 7
    - Red Hat 6

references:
    - https://documentation.wazuh.com/current/user-manual/capabilities/vulnerability-detection/index.html
    - https://documentation.wazuh.com/current/user-manual/reference/ossec-conf/vuln-detector.html#provider

tags:
    - settings
    - vulnerability
    - vulnerability_detector
    - providers
'''
import os
import pytest

from wazuh_testing.tools import configuration
from wazuh_testing.modules.vulnerability_detector.utils import check_vulnerability_scan_inventory
from wazuh_testing.db_interface import agent_db, cve_db
from wazuh_testing import LOG_FILE_PATH
from wazuh_testing.tools.monitoring import FileMonitor
from wazuh_testing.modules import vulnerability_detector as vd
from wazuh_testing.modules.vulnerability_detector import event_monitor as evm


# Reference paths
TEST_DATA_PATH = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'data')
CONFIGURATIONS_PATH = os.path.join(TEST_DATA_PATH, 'configuration_template')
TEST_CASES_PATH = os.path.join(TEST_DATA_PATH, 'test_cases')
CUSTOM_FEED_PATH = os.path.join(os.path.dirname(os.getcwd()), 'integration', 'test_vulnerability_detector', 'data')

# Configuration and cases data
configurations_path = os.path.join(CONFIGURATIONS_PATH, 'vulnerability_removal.yaml')
test_alert_vuln_removal_path = os.path.join(TEST_CASES_PATH, 'cases_vulnerability_removal.yaml')

# Custom feeds path
rhel_oval_feed_path = os.path.join(CUSTOM_FEED_PATH, 'feeds', 'redhat', vd.CUSTOM_REDHAT_OVAL_FEED)
rhel_json_feed_path = os.path.join(CUSTOM_FEED_PATH, 'feeds', 'redhat', vd.CUSTOM_REDHAT_JSON_FEED)
nvd_json_feed_path = os.path.join(CUSTOM_FEED_PATH, 'feeds', 'nvd', vd.CUSTOM_NVD_FEED)

# Test configurations
configuration_parameters, configuration_metadata, test_case_ids = configuration.get_test_cases_data(
    test_alert_vuln_removal_path)
configurations = configuration.load_configuration_template(configurations_path, configuration_parameters,
                                                           configuration_metadata)

# Set offline custom feeds configuration
to_modify = ['RHEL_FEED_PATH', 'RHEL_JSON_FEED_PATH', 'NVD_JSON_FEED_PATH']
new_values = [rhel_oval_feed_path, rhel_json_feed_path, nvd_json_feed_path]
configurations = configuration.update_configuration_template(configurations, to_modify, new_values)
configuration_metadata = configuration.update_configuration_template(configuration_metadata, to_modify, new_values)


@pytest.fixture(scope='function')
def prepare_evironment(mock_agent_function, metadata):
    """
    Mock an agent with packages in a synced state
    """
    agent_db.insert_package(agent_id=mock_agent_function, name=metadata['test_package_0_name'],
                            vendor=metadata['test_package_vendor'], version=metadata['test_package_version'],
                            source='NULL')
    agent_db.insert_package(agent_id=mock_agent_function, name=metadata['test_package_1_name'],
                            vendor=metadata['test_package_vendor'], version=metadata['test_package_version'],
                            source='NULL')

    # Force sync status for packages
    agent_db.update_sync_info(agent_id=mock_agent_function, component="syscollector-packages")

    # Avoiding a baseline-scan
    agent_db.update_last_full_scan(1, agent_id=mock_agent_function)

    yield mock_agent_function

    agent_db.clean_vulnerabilities_inventory(agent_id=mock_agent_function)


@pytest.mark.parametrize('configuration, metadata', zip(configurations, configuration_metadata), ids=test_case_ids)
def test_vulnerability_removal_update_package(configuration, metadata, set_wazuh_configuration,
                                              truncate_monitored_files, clean_cve_tables_func, prepare_evironment,
                                              setup_log_monitor, restart_modulesd_function):
    '''
    description: Check that the Vulnerability Detector module generates an alert when a vulnerability is removed from
                 the inventory when a package is updated to a non-vulnerable version. To do this, the manager is
                 configured to use custom feeds that include vulnerabilities associated with two test packages. Those
                 packages are added to the database of the simulated agent and then, one of the test packages will be
                 upgraded to a non-vulnerable version. These situations should generate alerts. Finally, it generate
                 a FULL_SCAN type and, after it is finished, the alerts that should have been generated after the
                 removal of the vulnerabilities are searched for.

    wazuh_min_version: 4.2.0

    parameters:
        - configuration:
            type: dict
            brief: Wazuh configuration data. Needed for set_wazuh_configuration fixture.
        - metadata:
            type: dict
            brief: Wazuh configuration metadata
        - set_wazuh_configuration:
            type: fixture
            brief: Set the wazuh configuration according to the configuration data.
        - truncate_monitored_files:
            type: fixture
            brief: Truncate all the log files and json alerts files before and after the test execution.
        - clean_cve_tables_func:
            type: fixture
            brief: Clean all the vulnerabilities tables before and after running the test.
        - prepare_evironment:
            type: fixture
            brief: Inserte vulnerable package to an agent and finally clean the database.
        - setup_log_monitor
            type: fixture
            brief: Create the log monitor.
        - restart_modulesd_function:
            type: fixture
            brief: Restart the wazuh-modulesd daemon.

    assertions:
        - The full scan will start for the agent.
        - The full scan finish for the agent.
        - The package is no more vulnerable.
        - The package was eliminated.

    input_description:
        -  The `case_alert_vulnerability_removal.yaml` file provides the module configuration for this test.

    expected_output:
        - 'A full scan will be run on agent <agent_id>'
        - 'Finished vulnerability assessment for agent <agent_id>'
        - '<test_package_cve> affecting <test_package_name> was eliminated'
        - Package '<test_package_name>' not vulnerable to '<test_package_cve>'
    '''
    agent_id = prepare_evironment
    log_monitor = setup_log_monitor

    # Wait for full scan event log
    evm.check_full_scan_start_finish(wazuh_log_monitor=log_monitor, agent_id=agent_id)

    # Update test package 1 to a non-vulnerable version.
    agent_db.update_package(agent_id=agent_id, package=metadata['test_package_1_name'],
                            version=metadata['test_package_version_not_vulnerable'])

    # Clean NVD tables to force a full scan again after updating the NVD feed and passed the min_full_scan_intervall
    cve_db.clean_nvd_tables()

    # Check again the full scan event
    evm.check_full_scan_start_finish(wazuh_log_monitor=log_monitor, agent_id=agent_id)

    # Ensure the test package update 1 has generated the log.
    evm.check_not_vulnerable_package(test_package_cve=metadata['test_package_1_cve'],
                                     test_package_name=metadata['test_package_1_name'])

    # Ensure the test package update 1 has generated an alert.
    evm.check_removal_package_alert(metadata['test_package_1_cve'], metadata['test_package_1_name'])


@pytest.mark.parametrize('configuration, metadata', zip(configurations, configuration_metadata), ids=test_case_ids)
def test_vulnerability_removal_delete_package(configuration, metadata, set_wazuh_configuration,
                                              truncate_monitored_files, clean_cve_tables_func, prepare_evironment,
                                              setup_log_monitor, restart_modulesd_function):
    '''
    description: Check that the Vulnerability Detector module generates an alert when a vulnerability is removed from
                 the inventory. To do this, the manager is configured to use custom feeds that include vulnerabilities
                 associated with two test packages. Those packages are added to the database of the simulated agent and
                 then, one of the test packages will be removed from de database. These situations should generate
                 alerts. Finally, it generate a FULL_SCAN type and, after it is finished, the alerts that should have
                 been generated after the removal of the vulnerabilities are searched for.

    wazuh_min_version: 4.2.0

    parameters:
        - configuration:
            type: dict
            brief: Wazuh configuration data. Needed for set_wazuh_configuration fixture.
        - metadata:
            type: dict
            brief: Wazuh configuration metadata
        - set_wazuh_configuration:
            type: fixture
            brief: Set the wazuh configuration according to the configuration data.
        - truncate_monitored_files:
            type: fixture
            brief: Truncate all the log files and json alerts files before and after the test execution.
        - clean_cve_tables_func:
            type: fixture
            brief: Clean all the vulnerabilities tables before and after running the test.
        - prepare_evironment:
            type: fixture
            brief: Inserte vulnerable package to an agent and finally clean the database.
        - setup_log_monitor
            type: fixture
            brief: Create the log monitor.
        - restart_modulesd_function:
            type: fixture
            brief: Restart the wazuh-modulesd daemon.

    assertions:
        - The full scan will start for the agent.
        - The full scan finish for the agent.
        - The package is no more vulnerable.
        - The package was eliminated.

    input_description:
        -  The `case_alert_vulnerability_removal.yaml` file provides the module configuration for this test.

    expected_output:
        - 'A full scan will be run on agent <agent_id>'
        - 'Finished vulnerability assessment for agent <agent_id>'
        - '<test_package_cve> affecting <test_package_name> was eliminated'
        - Package '<test_package_name>' not vulnerable to '<test_package_cve>'
    '''
    agent_id = prepare_evironment
    log_monitor = setup_log_monitor

    # Wait for full scan event log
    evm.check_full_scan_start_finish(wazuh_log_monitor=log_monitor, agent_id=agent_id)

    # Delete test package 0.
    agent_db.delete_package(agent_id=agent_id, package=metadata['test_package_0_name'])

    # Clean NVD tables to force a full scan again after updating the NVD feed and passed the min_full_scan_intervall
    cve_db.clean_nvd_tables()

    # Check again the full scan event
    evm.check_full_scan_start_finish(wazuh_log_monitor=log_monitor, agent_id=agent_id)

    # Ensure the removal of test package 0 has generated an alert.
    evm.check_removal_package_alert(metadata['test_package_0_cve'], metadata['test_package_0_name'])

